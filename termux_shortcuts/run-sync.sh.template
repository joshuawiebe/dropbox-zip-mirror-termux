#!/data/data/com.termux/files/usr/bin/bash
set -euo pipefail

# === Dropbox Mirror Sync Script ===
# Works both as standalone script and as Termux shortcut.

# --- Detect repo root automatically ---
SCRIPT_PATH="$(realpath "$0")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"

# Look for .git folder to detect repo root
if [ -d "$SCRIPT_DIR/.git" ]; then
    REPO_ROOT="$SCRIPT_DIR"
elif [ -d "$SCRIPT_DIR/../.git" ]; then
    REPO_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
elif [ -d "$HOME/dropbox-zip-mirror-termux/.git" ]; then
    REPO_ROOT="$HOME/dropbox-zip-mirror-termux"
else
    echo "❌ ERROR: Could not detect repository root."
    echo "Please adjust REPO_ROOT manually in this script."
    exit 1
fi

LOG_FILE="$REPO_ROOT/sync.log"
ENV_FILE="$REPO_ROOT/.dropbox_mirror.env"

# --- Detect Python interpreter ---
if [ -x "$REPO_ROOT/.venv/bin/python" ]; then
    PYTHON="$REPO_ROOT/.venv/bin/python"
elif [ -x "$REPO_ROOT/venv/bin/python" ]; then
    PYTHON="$REPO_ROOT/venv/bin/python"
elif command -v python3 >/dev/null 2>&1; then
    PYTHON="$(command -v python3)"
elif command -v python >/dev/null 2>&1; then
    PYTHON="$(command -v python)"
else
    echo "❌ ERROR: No Python interpreter found!"
    exit 1
fi

echo "=== Dropbox Mirror Sync ==="
date

# --- Check config file existence ---
if [ ! -f "$ENV_FILE" ]; then
    echo "❌ ERROR: Missing config file: $ENV_FILE"
    echo "Run ./setup_termux.sh from the repo root first!"
    exit 1
fi

# --- Run sync ---
{
    echo "[$(date)] Starting sync..."
    "$PYTHON" "$REPO_ROOT/sync_dropbox.py"
    echo "[$(date)] ✅ Sync completed successfully"
} >>"$LOG_FILE" 2>&1 || {
    echo "[$(date)] ❌ Sync failed" >>"$LOG_FILE"
    exit 1
}

echo "Log written to $LOG_FILE"
echo "=== Done ==="
